"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createApiJS = void 0;
const utils_1 = require("../../utils");
const api_1 = require("./api");
const createApiJS = (templateInfo, obj) => {
    const { importAxios, useAxios } = templateInfo;
    let template = importAxios;
    for (const className in obj) {
        const classInfo = obj[className];
        let nameRepeat = {};
        const funcList = classInfo.map((apiInfo) => {
            // 后端没有返回正确函数名称的时候, 根据url生成
            // let funcName = apiInfo.funcName ? toLowerCaseFirst(apiInfo.funcName) : getFuncName(apiInfo.url, className)
            let funcName = apiInfo.funcName
                ? (0, utils_1.toLowerCaseFirst)(apiInfo.funcName)
                : (0, utils_1.getFuncNameByOpenApi)(apiInfo.url, className, apiInfo.mode);
            handleRepeatName(funcName, nameRepeat);
            const withPath = hasHandlePath(apiInfo);
            const withParams = hasHandleParams(apiInfo);
            const withData = hasHandleData(apiInfo);
            const mode = apiInfo.mode.toUpperCase();
            const desc = (0, utils_1.Desc)(`${apiInfo.summary}${apiInfo.desc ? '-' + apiInfo.desc : ''}`);
            const args = [withPath && 'path', withParams && 'params', withData && 'data'].filter((f) => f).join(', ');
            const req = [withParams ? 'params' : '', withData ? 'data' : '']
                .filter((f) => f)
                .map((e) => `${e.split(':')[0]}: ${e.split(':')[0]},`)
                .join('\n  ');
            return (0, api_1.apiTemplateStatic)({ use: useAxios, url: apiInfo.url, method: mode, funcName, desc, args, req });
        });
        template += (0, api_1.apiTemplateClass)(className, funcList.join('\n'));
    }
    return template;
};
exports.createApiJS = createApiJS;
/** 根据url生成的函数名称可能存在重复的情况, 防止api.ts报错, 重复名称统一处理成 `_[fnName]_[repeatCount]` */
const handleRepeatName = (funcName, nameRepeat) => {
    if (nameRepeat[funcName]) {
        funcName = `_${funcName}_${nameRepeat[funcName]++}`;
    }
    else {
        nameRepeat[funcName] = 1;
    }
};
/** 是否存在路由传参, 存在则处理url */
const hasHandlePath = (apiInfo) => {
    var _a;
    if (!((_a = apiInfo.path) === null || _a === void 0 ? void 0 : _a.length))
        return false;
    apiInfo.path.forEach((item) => {
        apiInfo.url = apiInfo.url.replace(`{${item.name}}`, `\${path.${item.name}}`);
    });
    return true;
};
/** 是否存在params传参 */
const hasHandleParams = (apiInfo) => {
    var _a;
    return ((_a = apiInfo.params) === null || _a === void 0 ? void 0 : _a.length) ? true : false;
};
/** 是否存在data传参 */
const hasHandleData = (apiInfo) => {
    var _a;
    return Object.keys((_a = apiInfo.data) !== null && _a !== void 0 ? _a : {}).length ? true : false;
};
