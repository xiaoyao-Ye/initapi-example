"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transType = exports.createEntityTS = exports.createApiTS = void 0;
const utils_1 = require("../../utils");
const api_1 = require("./api");
const entity_1 = require("./entity");
const createApiTS = (
// TODO: type
templateInfo, apiClassInfo, entityEnumNameList) => {
    const { importAxios, useAxios } = templateInfo;
    let template = '';
    let importNameList = [];
    for (const className in apiClassInfo) {
        const classInfo = apiClassInfo[className];
        let nameRepeat = {};
        const funcList = classInfo.map((apiInfo) => {
            // 后端没有返回正确函数名称的时候, 根据url生成
            // let funcName = apiInfo.funcName ? toLowerCaseFirst(apiInfo.funcName) : getFuncName(apiInfo.url, className)
            let funcName = apiInfo.funcName
                ? (0, utils_1.toLowerCaseFirst)(apiInfo.funcName)
                : (0, utils_1.getFuncNameByOpenApi)(apiInfo.url, className, apiInfo.mode);
            /** 根据url生成的函数名称可能存在重复的情况, 防止api.ts报错, 重复名称统一处理成 `_[fnName]_[repeatCount]` */
            if (nameRepeat[funcName]) {
                funcName = `_${funcName}_${nameRepeat[funcName]++}`;
            }
            else {
                nameRepeat[funcName] = 1;
            }
            const pathStr = hasHandlePath(apiInfo, importNameList);
            const withParams = hasHandleParams(apiInfo, importNameList);
            const withData = hasHandleData(apiInfo, importNameList);
            const res = handleResType(apiInfo, importNameList);
            const mode = apiInfo.mode.toUpperCase();
            const desc = (0, utils_1.Desc)(`${apiInfo.summary}${apiInfo.desc ? '-' + apiInfo.desc : ''}`);
            const args = [pathStr, withParams, withData].filter((f) => f).join(', ');
            const req = [withParams && 'params', withData && 'data']
                .filter((f) => f)
                .map((e) => `${e}: ${e},`)
                .join('\n  ');
            return (0, api_1.apiTemplateStatic)({ use: useAxios, url: apiInfo.url, method: mode, funcName, desc, args, req, res });
        });
        const name = entityEnumNameList.includes(className) ? `${className}Api` : className;
        template += (0, api_1.apiTemplateClass)(name, funcList.join('\n'));
    }
    importNameList = [...new Set(importNameList)];
    // importNameList = importNameList.filter(f => entityEnumNameList.includes(f));
    template = (0, api_1.apiTemplateImport)(importAxios, importNameList) + template;
    return template;
};
exports.createApiTS = createApiTS;
/** 是否存在路由传参, 存在则处理url */
const hasHandlePath = (apiInfo, importNameList) => {
    var _a;
    if (!((_a = apiInfo.path) === null || _a === void 0 ? void 0 : _a.length))
        return;
    const propList = apiInfo.path.map((item) => {
        apiInfo.url = apiInfo.url.replace(`{${item.name}}`, `\${path.${item.name}}`);
        return `${item.name}: ${(0, exports.transType)(item.schema, importNameList)}`;
    });
    return `path: {${propList.join(', ')}}`;
};
/** 是否存在params传参 */
const hasHandleParams = (apiInfo, importNameList) => {
    var _a;
    if (!((_a = apiInfo.params) === null || _a === void 0 ? void 0 : _a.length))
        return;
    const propList = apiInfo.params.map((q) => `${q.name}?: ${(0, exports.transType)(q.schema, importNameList)}`);
    return `params?: {${propList.join(', ')}}`;
};
/** 是否存在data传参 */
const hasHandleData = (apiInfo, importNameList) => {
    var _a, _b, _c, _d, _e;
    if (!Object.keys((_a = apiInfo.data) !== null && _a !== void 0 ? _a : {}).length)
        return;
    let data;
    if ((_b = apiInfo.data) === null || _b === void 0 ? void 0 : _b.isFormData) {
        data = 'FormData';
    }
    else if ((_d = (_c = apiInfo.data) === null || _c === void 0 ? void 0 : _c.propList) === null || _d === void 0 ? void 0 : _d.length) {
        const propList = apiInfo.data.propList.map((item) => {
            return `${item.name}${item.nullable ? '' : '?'}:${(0, exports.transType)(item, importNameList)}`;
        });
        data = `{ ${propList.join(', ')} }`;
    }
    else {
        data = (0, exports.transType)((_e = apiInfo.data) === null || _e === void 0 ? void 0 : _e.schema, importNameList);
    }
    return `data?: ${data}`;
};
/** api的返回类型 */
const handleResType = (apiInfo, importNameList) => {
    var _a;
    if (!Object.keys((_a = apiInfo.res) !== null && _a !== void 0 ? _a : {}).length)
        return 'void';
    return (0, exports.transType)(apiInfo.res, importNameList);
};
const createEntityTS = (entityInfoList, enumInfoList) => {
    let template = '';
    entityInfoList.forEach((item) => {
        const propList = item.propList.map((prop) => {
            const desc = (0, utils_1.Desc)(prop.desc);
            const type = (0, exports.transType)(prop);
            // openApi的规则为必填项, 实际可能非必填项, 此处将属性一律设置为可选
            return (0, entity_1.entityTemplateClassProp)(prop.name, desc, type, false);
            // return entityTemplateClassProp(prop.name, desc, type, prop.nullable);
        });
        const desc = (0, utils_1.Desc)(item.desc);
        template += (0, entity_1.entityTemplate)('class', item.name, desc, propList.join('\n'));
    });
    enumInfoList.forEach((item) => {
        const desc = (0, utils_1.Desc)(item.desc);
        const propList = item.enumList.map((e) => `"${e}" = "${e}"`);
        template += (0, entity_1.entityTemplate)('enum', item.name, desc, propList.join(',\n'));
    });
    return template;
};
exports.createEntityTS = createEntityTS;
/**
 *
 * @param schema 类型过于复杂参考 EntityPropInfo | SchemaObject | ReferenceObject
 * @param importNameList 记录DTO
 */
const transType = (schema = {}, importNameList) => {
    if (schema.$ref) {
        const DTO_NAME = schema.$ref.split('/').pop();
        importNameList && importNameList.push(DTO_NAME);
        return DTO_NAME;
    }
    // TODO: SchemaObjectType SchemaObjectFormat 类型可做参考
    const numberEnum = ['integer', 'long', 'float', 'double', 'number', 'int', 'int32', 'int64'];
    if (schema.type === 'string') {
        return 'string';
    }
    else if (numberEnum.includes(schema.type)) {
        return 'number';
    }
    else if (schema.type === 'boolean') {
        return 'boolean';
    }
    else if (schema.type === 'array') {
        return `Array<${(0, exports.transType)(schema.items, importNameList)}>`;
    }
    else if (schema.type === 'object') {
        return `Map<string, ${schema.additionalProperties ? (0, exports.transType)(schema.additionalProperties, importNameList) : 'any'}>`;
        // return `{ [prop: string]: ${schema.additionalProperties ? transTypeTS(schema.additionalProperties, record) : 'any'} }`
    }
    else {
        console.log('untreated type: 7', schema);
        return 'any';
    }
};
exports.transType = transType;
