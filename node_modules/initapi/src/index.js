#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defineConfig = void 0;
const commander_1 = require("commander");
const checkUpdate_1 = require("./utils/checkUpdate");
const main_1 = require("./main");
var config_1 = require("./utils/config");
Object.defineProperty(exports, "defineConfig", { enumerable: true, get: function () { return config_1.defineConfig; } });
commander_1.program.name('initapi').version(checkUpdate_1.pkgVersion, '-V, --version');
commander_1.program.usage('<command> [options]');
commander_1.program
    .command('update')
    .description('update the cli to latest version')
    .action(() => __awaiter(void 0, void 0, void 0, function* () { return yield (0, checkUpdate_1.checkUpdate)(); }));
commander_1.program
    .command('create')
    .description('create api and entity')
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    (0, main_1.main)();
}));
commander_1.program.parse(process.argv);
