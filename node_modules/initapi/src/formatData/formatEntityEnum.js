"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatEntityEnum = void 0;
const type_1 = require("../type");
const utils_1 = require("../utils");
const formatEntityEnum = (data) => {
    var _a, _b, _c, _d;
    const entityInfoList = [];
    const enumInfoList = [];
    const entityNameList = [];
    const enumNameList = [];
    for (const schemaName in data) {
        if (!data.hasOwnProperty(schemaName))
            continue;
        const obj = data[schemaName];
        // ReferenceObject 类型不需要格式化
        if ((0, type_1.isReferenceObject)(obj)) {
            console.log('untreated type: 3', obj);
            continue;
        }
        // entity
        if (obj.type === 'object') {
            entityNameList.push(schemaName);
            if (schemaName == 'BillItemsVo') {
                console.log('111');
            }
            entityInfoList.push({
                name: schemaName,
                desc: (0, utils_1.clearCRLF)((_a = obj.description) !== null && _a !== void 0 ? _a : ""),
                propList: formatEntityPropList((_b = obj.properties) !== null && _b !== void 0 ? _b : {}),
            });
        }
        // enum
        if (obj.type === 'string') {
            enumNameList.push(schemaName);
            enumInfoList.push({
                name: schemaName,
                desc: (0, utils_1.clearCRLF)((_c = obj.description) !== null && _c !== void 0 ? _c : ""),
                enumList: (_d = obj.enum) !== null && _d !== void 0 ? _d : [],
            });
        }
    }
    return { entityInfoList, enumInfoList, entityNameList, enumNameList };
};
exports.formatEntityEnum = formatEntityEnum;
const formatEntityPropList = (properties) => {
    var _a, _b, _c;
    const propList = [];
    for (const propName in properties) {
        if (!properties.hasOwnProperty(propName))
            continue;
        // TODO: 为了便于类型转换成 propList 先强行转类型 
        const obj = properties[propName];
        let prop;
        // // ReferenceObject 类型优先处理(排除) 
        // if (isReferenceObject(obj)) {
        //   prop = {
        //     $ref: obj.$ref,
        //     name: propName,
        //     desc: clearCRLF((obj as any)?.description ?? ""), // TODO: 实际可能是有description的, 可能是类型定义错了
        //   }
        // } else {
        //   // SchemaObject
        //   prop = {
        //     name: propName,
        //     desc: clearCRLF(obj.description ?? ""),
        //     type: obj.type ?? "",
        //     nullable: obj.nullable ?? false,
        //     items: obj.items,
        //     additionalProperties: obj.additionalProperties,
        //   }
        // }
        if ((0, type_1.isSchemaObjectTypeArray)(obj.type)) {
            console.log('untreated type: 4', obj);
            continue;
        }
        prop = {
            $ref: obj === null || obj === void 0 ? void 0 : obj.$ref,
            name: propName,
            desc: (0, utils_1.clearCRLF)((_a = obj === null || obj === void 0 ? void 0 : obj.description) !== null && _a !== void 0 ? _a : ""),
            type: (_b = obj === null || obj === void 0 ? void 0 : obj.type) !== null && _b !== void 0 ? _b : "",
            nullable: (_c = obj === null || obj === void 0 ? void 0 : obj.nullable) !== null && _c !== void 0 ? _c : false,
            items: obj === null || obj === void 0 ? void 0 : obj.items,
            additionalProperties: obj === null || obj === void 0 ? void 0 : obj.additionalProperties,
        };
        if (obj.allOf || obj.oneOf || obj.anyOf) {
            console.log('untreated type: 8', obj);
            if ((0, type_1.isReferenceObject)(obj.allOf['0'])) {
                prop.$ref = obj.allOf['0'].$ref;
            }
            else {
                console.log('untreated type: 9', obj.allOf['0']);
            }
        }
        if (obj.properties) {
            console.log('untreated type: 6', obj);
            continue;
        }
        propList.push(prop);
    }
    return propList;
};
