"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const index_1 = require("./formatData/index");
const index_2 = require("./outputFile/index");
const request_1 = require("./utils/request");
const index_3 = require("./template/index");
const index_4 = require("./utils/index");
const inquirer_1 = require("./utils/inquirer");
const config_1 = require("./utils/config");
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    // 获取配置文件
    const { swagger, importAxios, useAxios, outputDir, outputType } = yield (0, config_1.getConfig)();
    // 命令行交互
    const { url, fileType, serviceName } = yield (0, inquirer_1.useInquirer)(swagger, outputType);
    // 获取 swagger/openapi 的json文件
    const data = yield (0, request_1.getInitData)(url);
    // 生成文件所需的 文件名 文件类型后缀
    const FILE_TYPE = { TypeScript: 'ts', JavaScript: 'js' };
    const suffix = FILE_TYPE[fileType];
    const fileName = serviceName !== null && serviceName !== void 0 ? serviceName : (0, index_4.toLowerCaseFirst)(Object.keys(data.paths)[0].split('/')[1]);
    // 格式化api信息
    const apiClassInfo = (0, index_1.formatApi)(data.paths);
    const templateInfo = { importAxios, useAxios };
    // 根据类型创建模板生成对应文件
    if (fileType === 'TypeScript') {
        const { entityInfoList, enumInfoList, entityNameList, enumNameList } = (0, index_1.formatEntityEnum)(data.components.schemas);
        const templateApi = (0, index_3.createApiTS)(templateInfo, apiClassInfo, [...entityNameList, ...enumNameList]);
        const templateEntity = (0, index_3.createEntityTS)(entityInfoList, enumInfoList);
        (0, index_2.outputFile)(outputDir, `${fileName}/api.${suffix}`, templateApi);
        (0, index_2.outputFile)(outputDir, `${fileName}/entity.${suffix}`, templateEntity);
    }
    else {
        const templateApi = (0, index_3.createApiJS)(templateInfo, apiClassInfo);
        (0, index_2.outputFile)(outputDir, `${fileName}/api.${suffix}`, templateApi);
    }
});
exports.main = main;
