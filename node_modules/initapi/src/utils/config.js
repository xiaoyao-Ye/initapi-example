"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.defineConfig = void 0;
const index_1 = require("./index");
/**
 * Type helper to make it easier to use vite.config.ts
 * accepts a direct {@link UserConfig} object, or a function that returns it.
 * The function receives a {@link ConfigEnv} object that exposes two properties:
 */
function defineConfig(config) {
    return config;
}
exports.defineConfig = defineConfig;
const defaultOptions = () => ({
    importAxios: 'import axios from "axios";',
    useAxios: 'axios.request',
    swagger: {
        test: 'https://petstore.swagger.io/v2/swagger.json',
    },
    outputDir: './api',
});
const getConfig = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const apiConfig = yield (0, index_1.tryRequire)(`./api.config`);
        let config = {};
        if (typeof apiConfig === 'function') {
            config = yield apiConfig({});
        }
        else {
            config = apiConfig;
        }
        return Object.assign(defaultOptions(), config);
    }
    catch (error) {
        console.error("try require error, please check 'api.config.ts' file.");
        throw new Error(error);
    }
});
exports.getConfig = getConfig;
