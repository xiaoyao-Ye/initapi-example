"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkUpdate = exports.pkgVersion = void 0;
const package_json_1 = __importDefault(require("../../package.json"));
const shelljs_1 = __importDefault(require("shelljs"));
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const inquirer_1 = __importDefault(require("inquirer"));
const ora_1 = __importDefault(require("ora"));
const updateVersion = (remoteVersionStr, pkgName) => {
    const spinner = (0, ora_1.default)(chalk_1.default.blackBright('正在更新, 请稍等...'));
    spinner.start();
    const shellScript = shelljs_1.default.exec(`npm i -g install ${pkgName}`);
    if (!shellScript.code) {
        spinner.succeed(chalk_1.default.green(`更新成功, 现在你的本地版本是最新版本${remoteVersionStr}`));
        return;
    }
    spinner.stop();
    console.log(chalk_1.default.red(`无法安装${pkgName}最新版本, 请检查您的网络或vpn`));
};
exports.pkgVersion = package_json_1.default.version;
const checkUpdate = () => __awaiter(void 0, void 0, void 0, function* () {
    const localVersion = package_json_1.default.version;
    const pkgName = package_json_1.default.name;
    const remoteVersionStr = shelljs_1.default.exec(`npm view ${pkgName} version`, { silent: true }).stdout;
    if (!remoteVersionStr) {
        console.log(chalk_1.default.red(`无法获取${pkgName}版本, 请检查网络!`));
        process.exit(1);
    }
    const remoteVersion = semver_1.default.clean(remoteVersionStr, undefined);
    if (remoteVersion !== localVersion) {
        console.log(`最新版本是 ${chalk_1.default.greenBright(remoteVersion)}, 本地版本是 ${chalk_1.default.blackBright(localVersion)} \n\r`);
        const { isUpdate } = yield inquirer_1.default.prompt([
            {
                name: 'isUpdate',
                type: 'confirm',
                message: '是否更新至最新版本?',
                choices: [
                    { name: '更新', value: true },
                    { name: '不更新', value: false },
                ],
            },
        ]);
        if (isUpdate) {
            updateVersion(remoteVersionStr, pkgName);
        }
    }
    console.info(chalk_1.default.green('Great! Your local version is latest!'));
});
exports.checkUpdate = checkUpdate;
